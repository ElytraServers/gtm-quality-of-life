plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev.legacyforge' version '2.0.91'

    id 'com.palantir.git-version' version '4.0.0'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

try {
    version = gitVersion()
    mod_version = version
} catch (Exception e) {
    logger.info("Failed to read version from git, '${mod_version}' is used.", e)
}

repositories {
    mavenLocal()
    maven {
        url "https://jitpack.io"
    }
    maven {
        url "https://maven.gtceu.com"
    }
    maven {
        // LowDragLib
        url "https://maven.firstdarkdev.xyz/snapshots"
    }
    maven { // Registrate
        url "https://maven.tterrag.com/"
    }
    maven {
        url "https://api.modrinth.com/maven"
        mavenContent {
            includeGroup("maven.modrinth")
        }
    }
    maven {
        // EMI
        url "https://maven.terraformersmc.com/releases/"
    }
    maven {
        // Conditional Mixin
        url "https://maven.fallenbreath.me/releases"
    }
    maven {
        // Configuration
        url "https://api.repsy.io/mvn/toma/public/"
        mavenContent {
            includeGroup("dev.toma.configuration")
        }
    }
    maven {
        url "https://maven.latvian.dev/releases"
        mavenContent {
            includeGroup("dev.latvian.mods")
        }
    }
    mavenLocal()
}

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.20.1, so mods should target Java 17.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.JETBRAINS
    }
}

legacyForge {
    // Specify the version of MinecraftForge to use.
    version = project.minecraft_version + '-' + project.forge_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            systemProperty 'mixin.debug.export', 'true'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG

            if (System.getProperty('java.vm.vendor').contains('JetBrains')) {
                println 'JetBrains Runtime found!'
                jvmArguments.addAll '-XX:+AllowEnhancedClassRedefinition'
            }
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime' and a deobfuscating one called 'modLocalRuntime'
// These configurations should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}
obfuscation {
    createRemappingConfiguration(configurations.localRuntime)
}

dependencies {
    // If you wish to declare dependencies against mods, make sure to use the 'mod*' configurations so that they're remapped.
    // See https://github.com/neoforged/ModDevGradle/blob/main/LEGACY.md#remapping-mod-dependencies for more information.

    // Example optional mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // modCompileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // modCompileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
    // We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
    // modLocalRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // modImplementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // modImplementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // modImplementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compileOnly("org.jetbrains:annotations:26.0.2")

    modImplementation("com.gregtechceu.gtceu:gtceu-${minecraft_version}:7.1.4") {
        // because we have a un-remapped-sources version below! :D
        exclude module: "com.lowdragmc.ldlib:ldlib-forge-${minecraft_version}"
    }
    modImplementation("com.lowdragmc.ldlib:ldlib-forge-1.20.1:1.0.43")
    modImplementation("com.tterrag.registrate:Registrate:MC1.20-1.3.11")

    modImplementation("dev.toma.configuration:configuration-forge-1.20.1:2.2.0")

    // uncomment this when we start to use Configuration v3+
    // modImplementation(jarJar("dev.toma.configuration:configuration-${project.minecraft_version}:2.2.0-forge"))

    modImplementation(jarJar("me.fallenbreath:conditional-mixin-forge:0.6.4"))

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.5.0"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.5.0"))

    modImplementation "maven.modrinth:jade:11.6.3"
    modImplementation "dev.emi:emi-forge:1.1.13+1.20.1"

    modRuntimeOnly("maven.modrinth:architectury-api:9.2.14+forge")
    modRuntimeOnly("dev.latvian.mods:kubejs-forge:2001.6.5-build.16")
    modRuntimeOnly("dev.latvian.mods:rhino-forge:2001.2.3-build.10")
}

// Uncomment the lines below if you wish to configure mixin. The mixin file should be named modid.mixins.json.
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest.attributes([
            "MixinConfigs": "${mod_id}.mixins.json"
    ])
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version          : forge_version,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
legacyForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true

        excludeDirs += file("run/logs")
        excludeDirs += file("run/crash-reports")
    }
}
